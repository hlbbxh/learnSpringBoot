						###########################################
						#			springBoot 学习笔记                                         #
						###########################################
						
##################################################################################
1.springBoot对jsp的支持
要想支持jsp  导入jsp的三个依赖
        <!-- servlet依赖. -->
        <dependency>
              <groupId>javax.servlet</groupId>
              <artifactId>javax.servlet-api</artifactId>
        <!-- jstl -->
        </dependency>
              <dependency>
                     <groupId>javax.servlet</groupId>
                     <artifactId>jstl</artifactId>
              </dependency>
        <!-- tomcat的支持.-->
        <dependency>
               <groupId>org.apache.tomcat.embed</groupId>
               <artifactId>tomcat-embed-jasper</artifactId>
        </dependency> 
在application.properties配置上下文
spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp

之后就和其他模板引擎都是一样使用了啦

注意look！    注意look！注意look！                                                                    thymeleaf    和      jsp    不可以同时使用
Springboot中新增了Thymeleaf模板的自动装载，
但如果同时使用jsp会发生什么事情呢？答案是自动注入的ThymeleafviewResolver也会匹配到寻找Jsp视图的请求，
ThymeleafviewResolver找不到对应的Thymeleaf视图后接着返回了error错误页面



##################################################################################
2.热部属
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<!-- optional=true, 依赖不会传递, 该项目依赖devtools; 
				之后依赖boot项目的项目如果想要使用devtools, 需要重新引入 -->
			<optional>true</optional>
		</dependency>
	直接导入这个jar包就可以了


##################################################################################
3.SpringBoot对错误的处理   是采用的Thymeleaf 模板的方式捕获错误
	e.printStackTrace();打印的是长长的红色部分的错误信息   可要可不要  感觉有log4j够用



##################################################################################
4.上下文路径
# 注意 Spring Boot 2.1.2已经把server.context-path弃掉了
server.servlet.context-path=/hlbbxh
#server.context-path=/hlbbxh

##################################################################################
多配置文件
3个配置文件：
核心配置文件：application.properties
开发环境用的配置文件：application-dev.properties
生产环境用的配置文件：application-pro.properties
这样就可以通过application.properties里的spring.profiles.active 灵活地来切换使用哪个环境了

jar包启动参数的传递
java -jar target/springboot-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev

##################################################################################
5.全局异常处理机制
ExpecttionWithController.java
@ControllerAdvice //首先是这个注解
这里是使用的是thymeleaf返回
ajax请求 的地址加了项目路径需要加入全局路径不然得404了
js中可以加入   debugger; 关键字 打开f12  代码自动停止


##################################################################################
6.整合mybatis和分页插件
导入jar包
# 为mybatis设置，生产环境可删除
restart.include.mapper=/mapper-[\\w-\\.]+jar
restart.include.pagehelper=/pagehelper-[\\w-\\.]+jar
上面的是热部署部分 生成环境可以删除或者注释
在application.properties配置数据源和mybatis分页
generatorConfig.xml放在pom.xml同级文件夹配置分页插件和数据源 包和类
GeneratorDisplay.java逆向工程的启动类 即可生成对应的文件


##################################################################################
7.整合redis
加入jar包 pom文件
在配置文件配置
注意最后的超时时间为5000毫秒即可
复杂的放入json字符串用到了  JsonUtils 他可以把 user转换为json 放入redis  在拿出来转换为user
RedisOperator redis 的操作类 相当于 jedis 这个jar包  
@Component   //注入 让spring扫描组件



##################################################################################
8.整合定时任务task 
先在启动类中加入@EnableScheduling//打开定时任务  打开即可扫描
创建task类 @Component //定义组件 加入组件注解
@Scheduled(fixedRate=3000)在方法体上加入注解 括号内为 运行区间


##################################################################################
9.异步调用的方法
首先在启动类中添加 注解 @EnableAsync //启用异步调用
在需要异步调用的方法中上加入@Async//开启异步调用方法

##################################################################################
10.拦截器的使用
在配置类中添加@Configuration //表明当前是一个适配器 
改类要继承extends WebMvcConfigurerAdapter  并且重写addInterceptors方法
在该方法体中定义 拦截的url
registry.addInterceptor(new TwoInterceptor()).addPathPatterns("/one/**").addPathPatterns("/tow/**"); //拦截
拦截器的实现 实现 HandlerInterceptor接口  重新不同时候调用的方法
OneInterceptor implements HandlerInterceptor 
注入上面的addPathPatterns registry





						###########################################
						#			           实战              学习笔记                                         #
						###########################################
1.spring  有三种启动方式 
	第一种：直接在软件中run
	第二种：进入到项目的根目录 使用 mvn spring-boot：run 也可以
	第三种：打成jar war包运行   mvn clean package 让后找到jar文件   java -jar 打包的文件

2.在控制器中读取配置文件的参数
imnMoney: 1
	
    @Value("${imnMoney}")
    private BigDecimal minmoney;

3.在配置文件中使用配置的属性
imnMoney: 1
desc: 最少发红包${imnMoney}

	@Value("${imnMoney}")
    private BigDecimal minmoney;

    @Value("${desc}")
    private String desc;
4.对象的方式进行配置文件的读取
limit.zuida=100
limit.zuixiao=1
limit.diesc=对上限和下限进行描述

	@Component
	@ConfigurationProperties(prefix = "limit")
	public class Limit {
	    private int zuida;
	    private int zuixiao;
	    private String diesc;

    @Autowired
    private Limit limit; 即可
5.多配置文件
	spring.profiles.active=prod
	nohup java -jar hlbbxh-8887.jar --site.controls.register=false &
	在后台启动 并传入参数    （先传入参数再在后面指定&）
	
6.url参数的传递，有两种
	第一种：使用  访问直接/zero/100
			@RequestMapping("/zero/{id}")
			public String getExpection(@PathVariable("id") int id){
			
	第二种：使用 ？参数传值的方式/zero?id=100
			@RequestMapping("/zero")
			public String getExpection(@RequestParam("id") int id){

	这样不是必须的
	public String getExpection(@RequestParam(value="id",required=false,defaultValue="0") int id){




						###########################################
						#		freemarker 学习笔记                                                    #
						###########################################
1.演示的小例子
	private Resource resource; //自动注入的资源文件对应实体
	
		md.addAttribute("resource",resource); //放入momdleandiew
		//这里直接返回  是按照  =classpath:/templates 这里来的
		return "freemarker/index";		
		
	FreeMarker模板引擎
	<p>==============================properties文件的取值</p>
	<h1>${resource.name}</h1>
	<h1>${resource.web}</h1>
	<h1>${resource.language}</h1>	
	
	
2.对 对象集合的取值    模板中使用 <#list 语法取值  集合名称  as  别名	
		List<SysUser> listuser = new ArrayList<>();
		SysUser sysUser = new SysUser();
		sysUser.setUserId(1);
		sysUser.setUserName("hyd");

		
		SysUser sysUser2 = new SysUser();
		sysUser2.setUserId(2);
		sysUser2.setUserName("wahahah");

		
		listuser.add(sysUser);
		listuser.add(sysUser2);
		
		md.addAttribute("listuser",listuser);  //放入作用域  	
模板中使用 <#list 语法取值  集合名称  as  别名	
	当对对象不存在的 时候 要先对对象进行判断   
	也可以  吧 对象.属性用 括号括起来 再加！    ${(item.userName)!}   ! 一般取最近的哪一个值  单引号和双引号  在fmk中没有区别
	<#list listuser as item>
	
		${item.userId}<br/> 别名取值
		${item.userName}<br/>
		${item.userPassworld}<br/>
		${item.userEmail}<br/>
		
		<p>========================</p>
		
	</#list>
	
	
	
3.值的注意事项
		md.addAttribute("buer",true);
		md.addAttribute("nowdate",new Date());
		//注意  布尔类型的   要在配置文件中进行转义   改成yes  or   no   
		//直接输出true  false  会报错的呦
		
				布尔类型：${buer?string("true","flase")}<#-- 对于布尔类型的转换 -->
				时间转换：${nowdate?string("yyyy-MM-dd")}<#-- 对于时间的转换   sql.util.date  会自动转义 util.date 得用string 来转换   -->

		md.addAttribute("nullzhi",null);//为空
				空值：${nullzhi!"我是默认的值了"} <#-- 空值的判断     直接在后面 加!   后面可以跟默认值   可以是字符串  也可以是 数字  有值  就不会输出默认值-->
				
				
			
4.自定义变量 变量的定义 赋值  运算
		<#assign a = 100 /> <#-- 定义变量 -->
		取值：${a}<br/>  <#-- 直接使用取值运算符合 -->
		运算：${a+1}<br/> <#-- 和el 一样进行在 取值符号进行运算 -->
		
		

5.对父文本处理
	md.addAttribute("fuwenben","<span style='color:red'>我是红色的</span>");
	
		对父文本的处理:${fuwenben}<br/><#-- 默认输出html  带红色的 -->
		不想输出父文本：${fuwenben?html}<#-- 使用   ？ html语法-->	
		
		
		
6.if的判断 逻辑 （和el无差别  还是可以使用括号的  可以使用非！ ）
		<#assign zhi = 20 /> <#-- 定义一个99 -->
		<#if zhi == 99>      <#-- 进行判断  -->
			<span> 我是 99 </span>   <#-- 为99 打印 -->
		<#else>                    <#-- else 直接一个便签就可以了 -->
			<span> 不是99？？？ </span>
		</#if>
		
		<p> ================= 对于 if  else  elseif </p>
		<#if zhi &gt;99>	<#-- 大于99 -->
			<span>我大于99 </span>
		<#elseif zhi == 99>
			<span> 我 等于 99 </span>
		<#else>
			<span> 我 等小于于 99 </span>
		</#if>
		
		<p> ================= 对集合进行非空判断   </p>
		<#if mylist??>  <#-- ?? 代表判断 这个集合 我存在  不       也可以  直接 使用   ？exists  效果是一样的--> 
			<#list mylist as item>
				${mylist}
			</#list>
		<#else>
			这个集合不存在呦
		</#if>
	
		<p> =================  多条件判断  </p>
		<#assign lang = 'jss' />
		<#if lang =='java' || lang == 'js'>  <#-- 或者   || -->
			<span>我是java</span>
		</#if>
		
		<#if lang == "jss" && lang?length == 3>  <#-- 与 &&  获取字符串的长度--》?length  还是可以使用括号的  -->
			<span>jss 长度 为  3</span>
		</#if>


7.switch语法  case break default  支持字符串  和 数字
		<#assign yufasw = 1000 /><#-- 判断的变量 -->
		<#switch yufasw>    
			<#case 10>      <#-- case 10 -->
				10<br/>
				<#break>    <#-- 要加入break  不加就会顺序输出  不跳出 -->
			<#case 100>
				100<br/>
				<#break>
			<#default>      <#-- 对最后一个输出  默认的值    break  最好加入 -->
 				其他的值
				<#break>
		</#switch>
		
8.对于string字符的内置函数
		<#assign str1 ="hello" />
		<#assign str2 ="world" />
		字符串的连接 用 +：${str1 + str2} <br/>              <#-- 连接 -->
		截取字符串：${(str1+str2)?substring(5,8)} <br/>   <#-- 截取   -->
		获取字符的长度：${str1?length} <br/> 
		大写：${str1?upper_case}<br/>    <#--  非java的驼峰的  命名   而是使用下划线的方式    -->
		小心：${str2?lower_case}<br/> 
		index of 首次出现的位置${str1?index_of("o")}<br/> 
		替换：${str1?replace('l','x')}   <br/> 
		last index of 单词最后一处出现的位置：${str1?last_index_of("l")}<br/> 	
		
9.自定义函数
		<h2>2.自定义函数</h2>
		<#assign myshuzu = [2,3,8,1,9,5,6] />  <#-- 自定义数组 -->
		未排序的时候直接用list语法：
		<#list myshuzu as items>
			${items}
		</#list>
		
		<br/>
		使用排序算法进行list输出:
		<#list short_int(myshuzu) as items> <#-- 使用后台的排序的自定义函数  short_int  是后台传过来的 -->
			${items}
		</#list>
		
		md.addAttribute("short_int",new ShortMethod());
		
		====================================================================list内置函数
		
		<#list myshuzu?sort as item>
			下标：${item_index}值：${item}  <#-- item_index 获取下标 -->
		</#list>
		
		<br/>
		数组的倒置：直接使用：reverse
		<#list myshuzu?reverse as items>
			${items}
		</#list>
		
		<br/>
		获取集合的长度:${myshuzu?size}
		<br/>
		list下边取值：${myshuzu[2]} <#-- list下边取值 -->

10.自定义指令  未成功
		FreeMarkerConfig 配置类  配置指令名称
		DiyFtlTag 自定义指令处理的类
		
		<@role user='132456' role='admin';result1,result2>
		
        	<#if result1>
				我是角色：admin
			</#if>
			
			<#list result2 as res2><#-- 打印的角色权限信息 -->
				#{res2}
			</#list>

		</@role>

11.内建函数
	1.处理字符串的   -->  substring 字符串截取  cap_first 首字母变大写  ends_with 以..结尾   contains 是否包含目标字符串   <br/>
			   -->  date datetime time  字符串转换时间类型                                                                                                                                 <br/>
			   -->  start_with 已..开始  index_of  last_index_of spilt 切分     trim  去掉两头的空格                       <br/>
	2.处理数字的       -->  ?string("0.##")小数后几位  round  floor ceiling                                 <br/>
	3.list的          -->   first last seq_contains seq_index_of  size rever sort sort_by chunk分块             <br/>
	4.其他内建函数  -->   is_string  is_number is_method 是不是方法    ()括起来  has_content整体判断    eval
	
12.宏 macro nested tetrn 指令

		===========================================================macro 语法：四种方式<br/>
		第一个，没有参数的宏指令<br/>
			<#macro test> <#-- 申明一个没有参数的 macro 指令 -->
				我是没有参数的macro
			</#macro>
		
			<@test /><#-- 调用 macro -->
		<br/>
		第二个，有参数的macro<br/>
			<#macro havepar par1 par2>   <#-- 申明 -->
				传递的参数 ${par1},${par2}
			</#macro>
		
			<@havepar par1="java" par2="js" />   <#-- 调用 -->
		<br/>
		第三个,有默认参数的  在声明的时候赋值  传的话用传的  不传的话 使用默认的<br/>
			<#macro defval par1 par2="java">   <#-- 申明 -->
				传递的参数：${par1},${par2}
			</#macro>
			
			<@defval par1=".net" par2="hello java" />有传<br/>    <#-- 调用 -->
			<@defval par1=".net" />不传<br/> 
		<br/>
		第四种,有多个参数<br/>
			<#macro manyVal par1 par2 parext...>   <#-- 申明 -->
				第一个参数：${par1}<br/>
				第二个参数：${par2}<br/>
				多个参数 ： ${parext['par3']}
			</#macro>
		<@manyVal par1="哇哈哈" par2="我曹" par3="你爸爸" /><#-- 调用 -->
		
		===========================================================nested 语法
		<#macro testnested par>
			取值：${par}<br/> <#-- 公共部分 java -->
			<#nested par,"我是 newsted 参数"><br/><#-- 参数为 2个   一个是传递的  一个是 默认的 -->	
		</#macro>
		
		调用：<br/>
		<@testnested par="hello java";loopv1 , loopv2 > <#-- 后面的 loop参数   有两个  调用两个的方式 -->
			<span style="color:red">
				取值：${loopv1}，${loopv2}
			</span>
		</@testnested>
		
		<br/>
		<@testnested par="hello nodeJS";loopv1 >  <#-- 调用一个的参数  -->
				取值：${loopv1}
		</@testnested>
		
		
		==============================================================function语法
		<#function tow_Add_count par1 par2><#-- 声明函数 -->
			<#return par1 + par2>
		</#function>
		${tow_Add_count(100,200)} <#-- 调用 -->




==============================================================
K03CHKJCFT-eyJsaWNlbnNlSWQiOiJLMDNDSEtKQ0ZUIiwibGljZW5zZWVOYW1lIjoibnNzIDEwMDEiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiRm9yIGVkdWNhdGlvbmFsIHVzZSBvbmx5IiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJJSSIsInBhaWRVcFRvIjoiMjAxOS0wNC0yNSJ9LHsiY29kZSI6IlJTMCIsInBhaWRVcFRvIjoiMjAxOS0wNC0yNSJ9LHsiY29kZSI6IldTIiwicGFpZFVwVG8iOiIyMDE5LTA0LTI1In0seyJjb2RlIjoiUkQiLCJwYWlkVXBUbyI6IjIwMTktMDQtMjUifSx7ImNvZGUiOiJSQyIsInBhaWRVcFRvIjoiMjAxOS0wNC0yNSJ9LHsiY29kZSI6IkRDIiwicGFpZFVwVG8iOiIyMDE5LTA0LTI1In0seyJjb2RlIjoiREIiLCJwYWlkVXBUbyI6IjIwMTktMDQtMjUifSx7ImNvZGUiOiJSTSIsInBhaWRVcFRvIjoiMjAxOS0wNC0yNSJ9LHsiY29kZSI6IkRNIiwicGFpZFVwVG8iOiIyMDE5LTA0LTI1In0seyJjb2RlIjoiQUMiLCJwYWlkVXBUbyI6IjIwMTktMDQtMjUifSx7ImNvZGUiOiJEUE4iLCJwYWlkVXBUbyI6IjIwMTktMDQtMjUifSx7ImNvZGUiOiJHTyIsInBhaWRVcFRvIjoiMjAxOS0wNC0yNSJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDE5LTA0LTI1In0seyJjb2RlIjoiQ0wiLCJwYWlkVXBUbyI6IjIwMTktMDQtMjUifSx7ImNvZGUiOiJQQyIsInBhaWRVcFRvIjoiMjAxOS0wNC0yNSJ9LHsiY29kZSI6IlJTVSIsInBhaWRVcFRvIjoiMjAxOS0wNC0yNSJ9XSwiaGFzaCI6Ijg4MjUwMTQvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-IJBDUuZMqhMJZfuM8Pgz1WXDRP3k9sKMJXuGdnbwoYDN4Y2G5Xmpw05GZUeESnh2/wzVxTHF4+PQ5ewk+J66F15b50VHSNxFI9XKWatoDfBc9EA1CddWqAU5CaipdMkSHoUDbT69PPGU4Vsfo1HTFv50tQ7RFVYMDbmVhw6mUbTFMvGiu5CZTuEVkmJ+1KpfuyQZvXjS1hXhfbK/xmpMG2/xRmK9lxW9PafZU1dWxqjYU8QBlUYgjdDsDS2apSTE+xFF6y3ZKK/YThpC7IYt5HR5Cc3VGjdb/H7jEAkH2/Uz0PrixPc3Bk5tU01rhxI4Z5VbmmWzGAhWWBtQEqU17A==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==
idea授权代码




1.SpringBoot对于数据库的操作
	导入的jar
        <!-- 引入spring boot - date- jpa -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
	
	配置文件
		spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
		spring.datasource.url=jdbc:mysql://127.0.0.1:3306/test?serverTimezone=GMT%2B8&useUnicode=true&characterEncoding=utf8
		spring.datasource.username=root
		spring.datasource.password=123456
		
		# spring.jpa.hibernate.ddl-auto=create  这里是 更新  保留原来的数据   create  则是每次都会刷新
		spring.jpa.hibernate.ddl-auto=update
		spring.jpa.show-sql=true

	反向生成实体
		/**
		 * 逆向工程生成数据库
		 */
		@Entity //表明是一个实体 才会向数据库建表
		public class Luckmoney {
		
		    @Id   // javax.persistence  该字段是id
		    @GeneratedValue //自动增涨
		    private Integer id;
		
		    private BigDecimal money;
		    
	dao层的接口
			/**
			 * 继承 JpaRepository 有两个参数  一个是 实体类  第二个是主键的类型
			 */
			public interface LuckMoneyRepository extends JpaRepository<Luckmoney,Integer> {
			
			}
	action的操作
			@RestController
			public class LuckMoneyController {
			
			    @Autowired
			    private LuckMoneyRepository luckMoneyRepository;//自动装载  自带许多的方法
			
			
			    /**
			     * 查询红包类表
			     * @return
			     */
			    @RequestMapping("/findall")
			    public List<Luckmoney> listAll(){
			        return luckMoneyRepository.findAll();
			    }
			
			    /**
			     * 存红包 发红包
			     * @param sendRen
			     * @param money
			     * @return
			     */
			    @RequestMapping("/savehongbao")    //参数的传递
			    public Luckmoney fahongbao(@RequestParam("sendRen") String sendRen, @RequestParam("money") BigDecimal money){
			        Luckmoney luckmoney = new Luckmoney();
			        luckmoney.setSendRen(sendRen);
			        luckmoney.setMoney(money);
			        return luckMoneyRepository.save(luckmoney);
			    }
			
			    /**
			     * 查询单个红包  按主键id差
			     * @param id
			     * @return
			     */
			    @RequestMapping("/findid/{id}") //这种是/传递参数的方式 不推荐
			    public Luckmoney findByid(@PathVariable("id") Integer id){
			        return luckMoneyRepository.findById(id).orElse(null);
			    }
			
			    /**
			     * 更新红包  要先查询红包  再set 要带id
			     * @param id
			     * @param recoverRen
			     * @return
			     */
			    @RequestMapping("/update/{id}")
			    public Luckmoney updatehongbao(@PathVariable("id") Integer id,@RequestParam("recoverRen") String recoverRen){
			      Optional<Luckmoney> optional = luckMoneyRepository.findById(id);//返回的查询的Optional
			        if(optional.isPresent()){
			            Luckmoney luckmoney =  optional.get();//返回的实体  原来的内容
			            luckmoney.setId(id);//必须得id
			            luckmoney.setRecoverRen(recoverRen);//更新的内容
			            return luckMoneyRepository.save(luckmoney);//存入
			        }
			        return null;
			    }
			}

2.SpringBoot对于数据库事物的操作 只需要在 方法上加上 @Transactional 注解即可  注意是springboot 包下面的
/**
 * 发红包 事物部分  要么都成功  要么都失败
 */
@Service
public class LuckMoneyService {

    @Autowired
    private LuckMoneyRepository luckMoneyRepository;

    @Transactional
    public void createTwo(){
        Luckmoney luckmoney1 = new Luckmoney();
        luckmoney1.setSendRen("aaa");
        luckmoney1.setMoney(new BigDecimal("520"));
        luckMoneyRepository.save(luckmoney1);

        Luckmoney luckmoney2 = new Luckmoney();
        luckmoney2.setSendRen("aaa");
        luckmoney2.setMoney(new BigDecimal("1314"));
        luckMoneyRepository.save(luckmoney2);


    }
}
mysql 默认的MyISAM 不支持事物   要改成 InnoDB 才可以 


3.web进阶之springboot验证 
	首先需要把映射的参数换成对象的形式
    @RequestMapping("/validentity")  // 在方法的实体参数前面 加 @Valid   错误信息 会返回在 BindingResult
    public Luckmoney saveMoneyEntity(@Valid Luckmoney luckmoney, BindingResult bindingResult){
        if(bindingResult.hasErrors()){ //判断是否有错误
            System.out.println(bindingResult.getFieldError().getDefaultMessage());//获取错误日志
            return null;
        }
   
    @Min(value = 10,message = "红包最少发10块") //验证最少为10
    private BigDecimal money;

4.aop切面的运用

	首先导入jar包
		<!-- spring boot Aop -->
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-aop</artifactId>
		</dependency>
	
	创建切面类 HttpAspect 在类上添加注解  @Aspect  @Component
		@Aspect //切面
		@Component //组件注入
		public class HttpAspect {
		
	传统的方式
	    /**
	     * 在切入的方法体之前进行拦截
	     * LuckMoneyController . * 代表改该方法的所有方法
	     * (..)代表所有参数都拦截
	     *
	     */
	    @Before("execution(public * com.hlbbxh.luckmoney.controller.LuckMoneyController.*(..))")
	    public void log(){
	        System.out.printf("在方法进入之前拦截了...");
	    }
	
	    @After("execution(public * com.hlbbxh.luckmoney.controller.LuckMoneyController.*(..))")
	    public void after(){
	        System.out.printf("在方法之后进行拦截了...");
	    }
	    
	 使用切点的方式  在方法上 定义切点   @Pointcut
	    @Pointcut("execution(public * com.hlbbxh.luckmoney.controller.LuckMoneyController.*(..))")
	    public void log(){
	        logger.info("这是log方法体，不会执行...");
	    }
		定义切点  就可以 直接写方法了
	    @Before("log()")
	    public void before(JoinPoint joinpoint){ //Joinpoint获取方法和参数的  注意上lang包下的
	        logger.info("这是在方法之前进行拦截....");
	    }
	
	    @After("log()")
	    public void after(){
	        logger.info("在方法之后进行拦截了...");
	    }
	    
	 logger的使用
	    //log4g 日志
	    private final static Logger logger = LoggerFactory.getLogger(HttpAspect.class);
	    //记录日志  在方法进入之前
	    @Before("log()")
	    public void before(JoinPoint joinpoint){ //Joinpoint获取方法和参数的  注意上lang包下的
	        logger.info("这是在方法之前进行拦截....");
	        //记录一些日志信息
	        // RequestContextHolder . getRequestAttributes = ServletRequestAttributes 强制转换
	        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
	        HttpServletRequest request = attributes.getRequest();//得到request
	        //url 地址
	        logger.info("url={}",request.getRequestURI());
	        //method 方法
	        logger.info("method={}",request.getMethod());
	        //ip 地址
	        logger.info("ip={}",request.getRemoteAddr());
	        //类方法   joinpoint.getSignature().getDeclaringTypeName() 类名
	        //  joinpoint.getSignature().getName()  方法名
	        logger.info("class_method={}",joinpoint.getSignature().getDeclaringTypeName()+"."+joinpoint.getSignature().getName());
	        //参数
	        logger.info("args={}",joinpoint.getArgs());
	    }

	    在方法执行完毕后 获取方法的返回值
	    /**
	     * 在方法之后 获取返回的对象
	     * 使用  @AfterReturning 注解
	     * 重写tosring 方法  打印 
	     * @param object
	     */
	    @AfterReturning(returning = "object",pointcut = "log()")
	    public void afterres(Object object){
	        logger.info("resullt={}",object.toString());
	    }