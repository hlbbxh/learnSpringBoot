						###########################################
						#			springBoot 学习笔记                                         #
						###########################################
						
##################################################################################
1.springBoot对jsp的支持
要想支持jsp  导入jsp的三个依赖
        <!-- servlet依赖. -->
        <dependency>
              <groupId>javax.servlet</groupId>
              <artifactId>javax.servlet-api</artifactId>
        <!-- jstl -->
        </dependency>
              <dependency>
                     <groupId>javax.servlet</groupId>
                     <artifactId>jstl</artifactId>
              </dependency>
        <!-- tomcat的支持.-->
        <dependency>
               <groupId>org.apache.tomcat.embed</groupId>
               <artifactId>tomcat-embed-jasper</artifactId>
        </dependency> 
在application.properties配置上下文
spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp

之后就和其他模板引擎都是一样使用了啦

注意look！    注意look！注意look！                                                                    thymeleaf    和      jsp    不可以同时使用
Springboot中新增了Thymeleaf模板的自动装载，
但如果同时使用jsp会发生什么事情呢？答案是自动注入的ThymeleafviewResolver也会匹配到寻找Jsp视图的请求，
ThymeleafviewResolver找不到对应的Thymeleaf视图后接着返回了error错误页面



##################################################################################
2.热部属
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<!-- optional=true, 依赖不会传递, 该项目依赖devtools; 
				之后依赖boot项目的项目如果想要使用devtools, 需要重新引入 -->
			<optional>true</optional>
		</dependency>
	直接导入这个jar包就可以了


##################################################################################
3.SpringBoot对错误的处理   是采用的Thymeleaf 模板的方式捕获错误
	e.printStackTrace();打印的是长长的红色部分的错误信息   可要可不要  感觉有log4j够用



##################################################################################
4.上下文路径
# 注意 Spring Boot 2.1.2已经把server.context-path弃掉了
server.servlet.context-path=/hlbbxh
#server.context-path=/hlbbxh

多配置文件
3个配置文件：
核心配置文件：application.properties
开发环境用的配置文件：application-dev.properties
生产环境用的配置文件：application-pro.properties
这样就可以通过application.properties里的spring.profiles.active 灵活地来切换使用哪个环境了

jar包启动参数的传递
java -jar target/springboot-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev

##################################################################################
5.全局异常处理机制
ExpecttionWithController.java
@ControllerAdvice //首先是这个注解
这里是使用的是thymeleaf返回
ajax请求 的地址加了项目路径需要加入全局路径不然得404了
js中可以加入   debugger; 关键字 打开f12  代码自动停止


##################################################################################
6.整合mybatis和分页插件
导入jar包
# 为mybatis设置，生产环境可删除
restart.include.mapper=/mapper-[\\w-\\.]+jar
restart.include.pagehelper=/pagehelper-[\\w-\\.]+jar
上面的是热部署部分 生成环境可以删除或者注释
在application.properties配置数据源和mybatis分页
generatorConfig.xml放在pom.xml同级文件夹配置分页插件和数据源 包和类
GeneratorDisplay.java逆向工程的启动类 即可生成对应的文件


##################################################################################
7.整合redis
加入jar包 pom文件
在配置文件配置
注意最后的超时时间为5000毫秒即可
复杂的放入json字符串用到了  JsonUtils 他可以把 user转换为json 放入redis  在拿出来转换为user
RedisOperator redis 的操作类 相当于 jedis 这个jar包  
@Component   //注入 让spring扫描组件



##################################################################################
8.整合定时任务task 
先在启动类中加入@EnableScheduling//打开定时任务  打开即可扫描
创建task类 @Component //定义组件 加入组件注解
@Scheduled(fixedRate=3000)在方法体上加入注解 括号内为 运行区间


##################################################################################
9.异步调用的方法
首先在启动类中添加 注解 @EnableAsync //启用异步调用
在需要异步调用的方法中上加入@Async//开启异步调用方法

##################################################################################
10.拦截器的使用
在配置类中添加@Configuration //表明当前是一个适配器 
改类要继承extends WebMvcConfigurerAdapter  并且重写addInterceptors方法
在该方法体中定义 拦截的url
registry.addInterceptor(new TwoInterceptor()).addPathPatterns("/one/**").addPathPatterns("/tow/**"); //拦截
拦截器的实现 实现 HandlerInterceptor接口  重新不同时候调用的方法
OneInterceptor implements HandlerInterceptor 
注入上面的addPathPatterns registry





						###########################################
						#			           实战              学习笔记                                         #
						###########################################
1.spring  有三种启动方式 
	第一种：直接在软件中run
	第二种：进入到项目的根目录 使用 mvn spring-boot：run 也可以
	第三种：打成jar war包运行   mvn clean package 让后找到jar文件   java -jar 打包的文件

2.在控制器中读取配置文件的参数
imnMoney: 1
	
    @Value("${imnMoney}")
    private BigDecimal minmoney;

3.在配置文件中使用配置的属性
imnMoney: 1
desc: 最少发红包${imnMoney}

	@Value("${imnMoney}")
    private BigDecimal minmoney;

    @Value("${desc}")
    private String desc;
4.对象的方式进行配置文件的读取
limit.zuida=100
limit.zuixiao=1
limit.diesc=对上限和下限进行描述

	@Component
	@ConfigurationProperties(prefix = "limit")
	public class Limit {
	    private int zuida;
	    private int zuixiao;
	    private String diesc;

    @Autowired
    private Limit limit; 即可
5.多配置文件
	spring.profiles.active=prod
	nohup java -jar hlbbxh-8887.jar --site.controls.register=false &
	在后台启动 并传入参数    （先传入参数再在后面指定&）
	
6.url参数的传递，有两种
	第一种：使用  访问直接/zero/100
			@RequestMapping("/zero/{id}")
			public String getExpection(@PathVariable("id") int id){
			
	第二种：使用 ？参数传值的方式/zero?id=100
			@RequestMapping("/zero")
			public String getExpection(@RequestParam("id") int id){

	这样不是必须的
	public String getExpection(@RequestParam(value="id",required=false,defaultValue="0") int id){

	