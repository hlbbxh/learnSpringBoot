						###########################################
						#			腾讯课堂    springBoot 学习笔记                     #
						###########################################
注：所有的演示文件都对应在 com.bao.learnSpringBoot.TencentClass 包下面

1.springboot对bean的注入

	首先是小汽车的抽象--》
	public interface Car {
		/**
		 * 描述自己的方法
		 */
		public void desc();
	}
		
		
	小汽车的两个具体实例--》
	@Component   //让这个类让ioc容器管理  加入 @Component 注解即可
	public class Bencar implements Car{
	
		@Override
		public void desc() {
			// TODO Auto-generated method stub
			System.out.println("我是一个本田车");
		}
		
	}
	
	@Component   //让这个类让ioc容器管理  加入 @Component 注解即可
	public class Baocar implements Car{
	
		@Override
		public void desc() {
			// TODO Auto-generated method stub
			System.out.println("我是宝马车");
		}
		
	之后是两个配置类--》
	@Configuration //代表配置类
	public class JavaConfigBen {
		
		@Bean("ben") //代表交给ioc管理  容器可以有多个   ben 为bean的名字 不写 默认方法名
		public Car getBen() {
			return new Bencar();
		}
	}
	
	@Configuration
	public class JavaCongfiBao {
		
		@Bean  //获取宝马  又是一个容器  但是 ioc 就 只有一个 
		public Car getBao() {
			return new Baocar();
		}
	}
	
	只能有一个ioc容器 要创建配置类的父类--》
	/**
	 * @author Gelil
	 * 代表上层容器
	 */
	@Configuration  //也需要  @Configuration 
	@Import({JavaCongfiBao.class,JavaConfigBen.class}) //导入两个自子容器  
		public class ParentConfig {
			
	}
	
	
	最后测试获取javabenan--》
	public class ContestLoderTest {
		public static void main(String[] args) {
			//创建  AnnotationConfigApplicationContext 对象   并且指定 父对象 
			AnnotationConfigApplicationContext context =new AnnotationConfigApplicationContext(ParentConfig.class);
			Car bencar = (Car) context.getBean("ben"); //使用bean 注解  的value 获取
			bencar.desc();
			Car baocar = (Car) context.getBean("getBao"); //默认使用方法名小写 即可 也是可以获取
			baocar.desc();
		}
	}
	
2.配置文件中yml语法的java map  list 对应的写法
	person: 
	  lname: 帝
	  #map 的语法 key 冒号后要有空格 
	  maps: {key1: val1, key2: val2}
	  # list 语法
	  list: [dag,pag,tiger]
	  #如果里面还有对象 直接在下面层级写即可
	  dag: 
	  	name: 旺财
	  	age: 3

	在properties文件中 
	list的写法：person.list=dog,pag,tiger
	map的写法：   person.map.key1=val1
	         person.map.key2=val2
	属性的类写法：person.dag.name=旺财
	
		<!-- springboot ymal 配置文件处理器  导入 就可以有提示了 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>

	注意：这里面的配置文件 可以随便 取值 可以不按照顺序 直接使用 ${person.lname} 即可  
		${person.lname}_dag 直接拼接 也是可以的
		还可以随机数 ${randomo.int} 即可   
		在单个取值的使用 用@Value 的时候  可以 使用"#3*12"的计算的
		使用对象注入的时候 可以可以加入校验 @Validated   @Email 代表验证邮箱

3.加载其他的配置文件    @PropertySource(value="classpath:resource.properties")//资源文件地址
	com.learn.name=hlb
	com.learn.web=www.hlbbxh.com
	com.learn.language=java
	
	@Configuration //代表引用资源文件的代表是配置
	@ConfigurationProperties(prefix="com.learn") //资源文件的前缀
	@PropertySource(value="classpath:resource.properties")//资源文件地址
	public class Resource {
		private String name;
		private String web;
		private String language;
		
	@PropertySource 里面是一个数组 可以加载多个配置文件
	
	使用bean.xml加载person对象 
	xml中  <bean id="person" class="com.bao.learnspringboot.entity.person"></bean>
	
	在启动类上方加入
	@ImportResource(locations = {"classpath:beans.xml"})
	
	在测试方法中直接使用 @Autowired 自动注入 ApplicationContext .getBean("person");就可以获得还对象的实例
	
4.多配置文件的时候 直接 使用 spring.profiles.active=dev就可以了
	ymal支持多文档块的支持  直接使用 --- 三个横线就可以了
	

5.源码分析
	spring-boot-1.3.0.RELEASE.jar 
	/META-INF/spring.factories 包下面有许多启动器
	配置为文件 debug=true 开启启动详细信息
	
6.webjars 导入qjuery  https://www.webjars.org/
	在maven中添加依赖
		<!-- webJars 导入的 jquery  -->
		<dependency>
		    <groupId>org.webjars</groupId>
		    <artifactId>jquery</artifactId>
		    <version>3.4.0</version>
		</dependency>
		<!-- 在这个路径可以查看  http://localhost:8088/hlbbxh/webjars/jquery/3.4.0/jquery.js -->
	下载的jar包内容可以查看
	G:\Learning_software\maven\mavenRep\org\webjars\jquery\3.4.0\jquery-3.4.0.jar

5.thymeleaf语法复习
	多取值可以使用 + 来拼接  支持ognl表达式
		用户姓名：<input th:value="${user.name + user.age}"/>
	日期转换的两种方式：
		用户生日：<input th:value="${#dates.format(user.birthday, 'yyyy-MM-dd')}"/>
		<!-- thymeleaf 的日期转换格式                                            参数                                                       格式                 -->
		<br/>
		用户生日：<input th:value="${#calendars.format(user.birthday, 'yyyy-MM-dd')}"/>
	在list中也是可以使用.size获取长度
	
	spring.mvc.date-format=yyyy-MM-dd 也是可以在配置文件中指定时间格式
	
	注意 默认的访问主页是在：/learnSpringBoot/src/main/resources/static/index.html下

6.当我们的thymelaf中的模板是一个静态的页面的时候，要想访问的话需要添加一个空的控制器来进行跳转，这样就很麻烦，所以我们要加入自己的解析配置了类
	首先是我需要跳转的空的thymeleaf模板页面
	<!DOCTYPE html>
	<html>
	<head lang="en">
	    <meta charset="UTF-8" />
	    <title></title>
	<title>我是一个空的thymeleaf页面</title>
	</head>
	<body>
		<center>
			我是一个空的thymeleaf的模板  可以 直接 在  url 路径中 使用 /kong 进行访问 但是前提是要 在 MvcConfig中配置
		</center>
	</body>
	</html>
	之后就是创建配置类
	/**
	 * 当我们的thymelaf中的模板是一个静态的页面的时候，
	 * 要想访问的话需要添加一个空的控制器来进行跳转，
	 * 这样就很麻烦，所以我们要加入自己的解析配置了类
	 * @author Gelil
	 *
	 */
	@Configuration
	public class MvcConfig implements WebMvcConfigurer{
		
		/**
		 * 重写这个方法  加入空的  thymeleaf 的空的  模板
		 */
		@Override
		public void addViewControllers(ViewControllerRegistry registry) {
			// TODO Auto-generated method stub
			registry.addViewController("/kong").setViewName("thymeleaf/kong");
			//                          url                  资源地址 
		}
		
		/**
		 * 添加时间格式化器  不如直接使用
		 * spring.mvc.date-format=yyyy-MM-dd 也是可以在配置文件中指定时间格式
		 */
		@Override
		public void addFormatters(FormatterRegistry registry) {
		}
	}
	
	之后 直接 在url中输入/kong  即可返回  thymeleaf 页面  kong.html

	
7.使用阿里的fastjson消息转发器
	导入jar
		<!-- 阿里的消息转发器  fastjson -->
		<dependency>
		    <groupId>com.alibaba</groupId>
		    <artifactId>fastjson</artifactId>
		    <version>1.2.54</version>
		</dependency>
		
	还是MvcConfig  configureMessageConverters 重写
	/**
	 * 消息转发器  就是格式化了一下时间日期  使用的阿里的 fastjson 
	 * 感觉并没有什么用  springboot 不知自带
	 */
	@Override
	public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {
		FastJsonHttpMessageConverter fc = new FastJsonHttpMessageConverter();
		FastJsonConfig config = new FastJsonConfig();
		config.setSerializerFeatures(SerializerFeature.PrettyFormat);
		fc.setFastJsonConfig(config);
		converters.add(fc);
		/*	使用  在实体类上  
		 * 	@JSONField(format="yyyy-MM-dd")
			private Date birthday;
		 * */
	}

8.拦截器的配置
	先创创建拦截器的类 里面有许多方法  之前  之后  结果等 这里就写了之前  OneInterceptor.java
	public class OneInterceptor implements HandlerInterceptor  {
	
		/**
		 * 在请求处理之前进行调用（Controller方法调用之前）
		 */
		@Override
		public boolean preHandle(HttpServletRequest request, HttpServletResponse response, 
				Object object) throws Exception {
			
			System.out.println("被one拦截，放行...");
			return true;
			
			/*if (true) {
				returnErrorResponse(response, JsonResult.errorMsg("被one拦截..."));
			}
			
			return false;*/
		}
	还是上面的MvcConfig  添加拦截器
	/**
	 * 这是拦截器的配置  
	 * 同样都是这个方法 addInterceptors
	 */
	@Override
	public void addInterceptors(InterceptorRegistry registry) {
		// TODO Auto-generated method stub
		registry.addInterceptor(new OneInterceptor()).
								addPathPatterns("/one/**").
								excludePathPatterns("/one/index");
	}

9.

	

